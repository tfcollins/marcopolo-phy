function crc = createHTSIGCRC( bits )

%%
bits = [1 1 1 1 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0];

I_D = [0 0 0 0 0 0 0 0];
M_D_xor_I_D = xor(bits(1:8), I_D);

M8 = [M_D_xor_I_D,bits(9:end),0 0 0 0 0 0 0 0];
GD = [1 0 0 0 0 0 1 1 1];

%%
% M8 = [1 1 1 1 1 1 0 1 1 1 1 1 1 0];
% GD = [1 0 0 0 1 1 0 1 1];

for k=1:length(M8) - length(GD) + 1
    
    if M8(k)==0
        continue;
    end
    
    result = xor(M8(k:k+length(GD)-1),GD);
    M8(k:k+length(GD)-1) = result;
    
    M8.'
    pause(1);
    
%     M8_saved(k,:) = M8;
%     if k<7
%         clc
%         M8_saved(1:k,:).'
%     end
%     pause(3);
    
end
desired = [1 0 1 0 1 0 0 0];



%%
GenPoly = [1 0 0 0 0 0 1 1 1];
H = comm.CRCGenerator(GenPoly);
%H.InitialConditions = [1 1 1 1 1 1 1 1];
%H.DirectMethod = true;
%H.FinalXOR = ones(1,8);
%H.ReflectInputBytes = true;
%H.ReflectChecksums = true;

% Ex:
in = [1 1 1 1 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0];
desired = [1 0 1 0 1 0 0 0];
out = step(H, ~in.').';
[desired.' out(end-7:end).']

%%
c = [0 0 0 0 0 0 0 0];
out = zeros(size(bits));
for k = 1:length(bits)
   
    out(k) = ~c(8);
    c(3:7);
    
    
end


end